# Count males and females in data.csv by detecting a gender/sex column and normalizing values

import sys

try:
    import pandas as pd
except ImportError:
    print("Missing dependency: pandas. Please install it and rerun.")
    sys.exit(1)

def classify_value(val, colname_lower):
    # Returns 'male', 'female', or None
    if pd.isna(val):
        return None

    # Handle booleans or numeric flags for 'is_male'
    if 'is_male' in colname_lower or 'ismale' in colname_lower:
        if isinstance(val, bool):
            return 'male' if val else 'female'
        # Numeric or string numeric
        try:
            fval = float(val)
            if fval == 1:
                return 'male'
            if fval == 0:
                return 'female'
        except Exception:
            pass

    s = str(val).strip().lower()

    # Common male/female mappings in various languages/abbreviations
    male_set = {
        'male','m','man','men','boy','masc','masculino','masculine','homme','varon','varÃ³n','mr','sir'
    }
    female_set = {
        'female','f','woman','women','girl','fem','feminino','feminine','femme','femenino','mrs','ms','lady'
    }

    # Remove common punctuation
    s_clean = s.replace('.', '').replace(',', '').strip()

    if s_clean in male_set:
        return 'male'
    if s_clean in female_set:
        return 'female'

    # Numeric coding in 'sex' columns is sometimes 1=male, 2=female (or 0/1); try to infer
    if any(k in colname_lower for k in ['sex', 'gender']):
        # Try numeric
        try:
            fval = float(s_clean)
            # Heuristics: prioritize common encodings
            if fval in (1,):
                return 'male'
            if fval in (2,):
                return 'female'
            if fval == 0:
                # Ambiguous; often 0=female or unknown; leave unclassified
                return None
        except Exception:
            pass

    # Handle single-letter with space already covered; also possible 'M '/'F ' handled via strip
    if s_clean == 'm':
        return 'male'
    if s_clean == 'f':
        return 'female'

    # Mixed labels M/F, etc. -> unclassified
    if s_clean in {'m/f','male/female','f/m','female/male'}:
        return None

    return None

def evaluate_column(series, colname):
    col_lower = colname.lower()
    male = female = unknown = 0
    for v in series:
        lab = classify_value(v, col_lower)
        if lab == 'male':
            male += 1
        elif lab == 'female':
            female += 1
        else:
            unknown += 1
    return {
        'column': colname,
        'male': male,
        'female': female,
        'unknown': unknown,
        'labeled': male + female,
        'total': len(series)
    }

def column_priority(name):
    n = name.lower()
    # Higher priority for more explicit names
    if 'gender' in n:
        return 3
    if 'sex' in n:
        return 2
    if 'is_male' in n or 'ismale' in n:
        return 1
    return 0

def main():
    try:
        df = pd.read_csv('data.csv')
    except FileNotFoundError:
        print("data.csv not found in the working directory.")
        sys.exit(1)
    except Exception as e:
        print(f"Error reading data.csv: {e}")
        sys.exit(1)

    if df.empty:
        print("The dataset is empty; cannot compute counts.")
        sys.exit(0)

    # Identify candidate columns
    candidates = [c for c in df.columns if any(k in c.lower() for k in ['gender', 'sex', 'is_male', 'ismale'])]
    search_cols = candidates if candidates else list(df.columns)

    evaluations = []
    for col in search_cols:
        eval_res = evaluate_column(df[col], col)
        if eval_res['labeled'] > 0:
            evaluations.append(eval_res)

    if not evaluations:
        print("Could not find a column with male/female information.")
        print("Task completed: No gender/sex column detected to count males and females.")
        sys.exit(0)

    # Choose best column by labeled count, then by priority, then by name
    evaluations.sort(key=lambda x: (x['labeled'], column_priority(x['column']), x['column']), reverse=True)
    best = evaluations[0]

    # Output results
    print(f"Detected gender/sex column: {best['column']}")
    print(f"Total rows: {best['total']}")
    print(f"Males: {best['male']}")
    print(f"Females: {best['female']}")
    if best['unknown'] > 0:
        print(f"Unclassified/other/missing: {best['unknown']}")
    print("Task completed: Counted males and females from the detected column.")

if __name__ == "__main__":
    main()
