import sys
import re

# Attempt to use pandas; if not installed, the executor will throw an error and we'll install it next.
try:
    import pandas as pd
except ModuleNotFoundError as e:
    print("Error: pandas is not installed. Please run pip install pandas and re-run the code.")
    sys.exit(1)

def normalize_token(x):
    if pd.isna(x):
        return None
    s = str(x).strip().lower()
    # remove non-letters to normalize tokens like "F." or "M/F"
    s = re.sub(r'[^a-z]+', '', s)
    return s if s != '' else None

male_tokens = {'male', 'm', 'man', 'boy', 'masculine'}
female_tokens = {'female', 'f', 'woman', 'girl', 'feminine'}

def classify_gender_token(x):
    s = normalize_token(x)
    if s is None:
        return None
    if s in male_tokens:
        return 'male'
    if s in female_tokens:
        return 'female'
    return 'other'

def detect_gender_column(df):
    # 1) Prefer columns whose name suggests gender/sex
    candidates_by_name = [c for c in df.columns if ('gender' in c.strip().lower()) or ('sex' in c.strip().lower())]
    # 2) Evaluate candidates by match count
    def score_column(col):
        series = df[col]
        non_null = series.notna().sum()
        if non_null == 0:
            return 0, 0, 0
        mapped = series.map(classify_gender_token)
        male_count = (mapped == 'male').sum()
        female_count = (mapped == 'female').sum()
        return male_count + female_count, male_count, female_count

    best_col = None
    best_score = -1
    best_counts = (0, 0)

    # First pass: name-based candidates
    for col in candidates_by_name:
        total, m_cnt, f_cnt = score_column(col)
        if total > best_score:
            best_score = total
            best_col = col
            best_counts = (m_cnt, f_cnt)

    # If not found or too weak, scan object/category columns
    if best_score <= 0:
        for col in df.columns:
            if df[col].dtype == 'object' or str(df[col].dtype).startswith('category'):
                total, m_cnt, f_cnt = score_column(col)
                if total > best_score:
                    best_score = total
                    best_col = col
                    best_counts = (m_cnt, f_cnt)

    # Apply a minimal threshold: at least 2 matches or 10% of non-null rows, whichever is smaller but >=1
    if best_col is not None:
        non_null = df[best_col].notna().sum()
        threshold = max(1, min(2, int(0.1 * non_null)))
        if best_score >= threshold:
            return best_col, best_counts[0], best_counts[1]
    return None, 0, 0

# Main execution
try:
    df = pd.read_csv('data.csv')
except FileNotFoundError:
    print("Error: data.csv not found in working directory.")
    sys.exit(1)
except Exception as e:
    print(f"Error reading data.csv: {e}")
    sys.exit(1)

gender_col, male_count, female_count = detect_gender_column(df)

if gender_col is None:
    print("Could not confidently identify a gender/sex column in data.csv. Please ensure there is a column for gender/sex (e.g., 'Gender' or 'Sex'). Task could not be completed.")
else:
    total_rows = len(df)
    print(f"Detected gender column: {gender_col}")
    print(f"Male count: {male_count}")
    print(f"Female count: {female_count}")
    print(f"Total rows: {total_rows}")
    print("Completed counting male and female entries from data.csv.")
